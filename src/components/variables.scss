$mq-breakpoints: (
  mobile:      320px,
  mini-tablet: 560px, 
  tablet:      740px,
  desktop:     980px,
  wide:        1400px
);

$colors: (
  white: (
    400: hsl(0, 0%, 100%)
  ),
  black: (
    400: hsl(0, 0%, 0%)
  ),
  grey: (
    900: hsl(240, 3%, 6%),
    700: hsl(240, 1%, 30%),
    300: hsl(270, 2%, 78%),
    100: hsl(0, 2%, 95%)
  ),
  accent: (
    400: hsl(256, 86%, 54%)
  ),
  focus-blue: (
    400: hsl(207, 98%, 63%)
  )
);

@function color($name, $level: 400, $alpha: 1) {
  @if map-has-key($colors, $name) {
    $color: map-get($colors, $name);

    @if map-has-key($color, $level) {
      @return transparentize(map-get($color, $level), 1 - $alpha);
    }

    @warn "There is no level #{$level} for color #{$name}";
    @return null;
  }
   
  @warn "There is no color #{$name} in the map `$colors`";
  @return null;
}

$spacing: (
  xs: 4,
  sm: 8,
  md: 16,
  lg: 32,
  xl: 48,
  2xl: 80
);

@function spacing($level, $unit: rem) {
  @if map-has-key($spacing, $level) {
    $amount: map-get($spacing, $level);
    @if $unit == "rem" {
      @return unquote($amount / 16 + "rem");
    }

    @if $unit == "px" {
      @return unquote($amount + "px");
    }

    @warn "Spacing unit #{$unit} is invalid; must be one of `rem` or `px`";
    @return null;
  }

  @warn "There is no level #{$level} in the map `$spacing`";
  @return null;
}

$font-stacks: (
  sans: "'Karla', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif"
);

@function font-stack($name) {
  @if map-has-key($font-stacks, $name) {
    @return unquote(map-get($font-stacks, $name));
  }
   
  @warn "There is no font family #{$name} in the map `$font-stacks`";
  @return null;
}

$font-sizes: (
  xs: 12,
  sm: 14,
  body: 16,
  h6: 18,
  h5: 20,
  h4: 24,
  h3: 28,
  h2: 36,
  h1: 48,
  h0: 96
);

@function font-size($level, $unit: rem) {
  @if map-has-key($font-sizes, $level) {
    $amount: map-get($font-sizes, $level);
    @if $unit == "rem" {
      @return unquote($amount / 16 + "rem");
    }

    @if $unit == "px" {
      @return unquote($amount + "px");
    }

    @warn "Spacing unit #{$unit} is invalid; must be one of `rem` or `px`";
    @return null;
  }

  @warn "There is no font size #{$level} in the map `$font-sizes`";
  @return null;
}

$leading: (
  none: 1,
  tight: 1.25,
  normal: 1.5,
  double: 2
);

@function leading($level) {
  @if map-has-key($leading, $level) {
    @return map-get($leading, $level);
  }
   
  @warn "There is no level #{$level} in the map `$leading`";
  @return null;
}

$tracking: (
  none: 0,
  wide: 0.07em
);

@function tracking($level) {
  @if map-has-key($tracking, $level) {
    @return map-get($tracking, $level);
  }

  @warn "There is no level #{$level} in the map `$tracking`";
  @return null;
}

$font-weights: (
  normal: 400,
  bold: 700
);

@function font-weight($weight) {
  @if map-has-key($font-weights, $weight) {
    @return map-get($font-weights, $weight);
  }

  @warn "There is no weight #{$weight} in the map `$font-weights`";
  @return null;
}

@mixin font($size: null, $leading: null, $stack: null, $weight: null, $tracking: null, $sizeUnit: "rem") {
  @if $size != null {
    font-size: font-size($size, $sizeUnit);
  }

  @if $leading != null {
    line-height: leading($leading);
  }

  @if $stack != null {
    font-family: font-stack($stack);
  }

  @if $weight != null {
    font-weight: font-weight($weight);
  }

  @if $tracking != null {
    letter-spacing: tracking($tracking);
  }
}
